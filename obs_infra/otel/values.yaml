opentelemetry-collector:
  mode: deployment
  image:
    repository: "otel/opentelemetry-collector-contrib"
    tag: "latest"

  config:
    receivers:
      prometheus:
        config:
          global:
              scrape_interval: 30s
              scrape_timeout: 10s
          scrape_configs:
            - job_name: 'sample-service-pods'
              kubernetes_sd_configs:
                - role: endpoints
                  namespaces:
                    names: ['monitoring']
              relabel_configs:
                # Keep only your specific service
                - source_labels: [__meta_kubernetes_service_name]
                  action: keep
                  regex: sample-service
                # Keep only the metrics port (adjust if your port has different name)
                - source_labels: [__meta_kubernetes_endpoint_port_name]
                  action: keep
                  regex: metrics
                # Optional: Add service name as a label for easier identification
                - source_labels: [__meta_kubernetes_service_name]
                  target_label: service
              metrics_path: '/metrics'
              scrape_interval: 30s
              honor_labels: true
      otlp:
        protocols:
          http:
            endpoint: 0.0.0.0:4318
          grpc:
            endpoint: 0.0.0.0:4317

      filelog:
        include: [/var/log/containers/**/*.log]
        start_at: beginning
        operators:
          - type: json_parser
            id: parse_json
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          - type: move
            from: attributes.log
            to: body

    processors:
      batch:
        send_batch_size: 10000
        timeout: 10s
        send_batch_max_size: 11000

    exporters:
      otlp/elasticapm:
        endpoint: "http://apm-server-apm-server:8200"
        tls:
          insecure: true
      otlp/jaeger:
        endpoint: "jaeger-collector:4317"
        tls:
          insecure: true

    service:
      pipelines:
        logs:
          receivers: [filelog]
          processors: [batch]
          exporters: [otlp/elasticapm]
        metrics:
          receivers: [otlp,prometheus]
          processors: [batch]
          exporters: [otlp/elasticapm]  # You can remove if youâ€™re not sending metrics
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/elasticapm,otlp/jaeger]

  clusterRole:
    create: true
    rules:
      - apiGroups: [""]
        resources: ["*"]
        verbs: ["get", "list", "watch"]

  extraVolumes:
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
        type: Directory
    - name: varlog 
      hostPath:
        path: /var/log
        type: Directory

  extraVolumeMounts:
    - name: varlibdockercontainers
      mountPath: /var/lib/docker/containers
      readOnly: true
    - name: varlog
      mountPath: /var/log
      readOnly: true

  # Resource limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

  # Security context to access log files
  securityContext:
    runAsUser: 0
    runAsGroup: 0
    # fsGroup: 0

  # Service configuration
  service:
    type: ClusterIP
